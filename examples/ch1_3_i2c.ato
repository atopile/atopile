import Addressor3
import I2C
import ElectricPower
import ElectricLogic
import Resistor

"""
This example demonstrates how to use the Addressor component to automatically
configure the address pins of an I2C client device based on a desired I2C address.
"""

module I2CClientExampleIC:
    """
    Example IC to use as I2C client/server
    """

    signal gnd ~ pin 9
    signal vcc ~ pin 21

    signal i2c_sda ~ pin 20
    signal i2c_scl ~ pin 19

    signal i2c_address_pin_1 ~ pin 22
    signal i2c_address_pin_2 ~ pin 23
    signal i2c_address_pin_3 ~ pin 18

    manufacturer = "Texas Instruments"
    mpn = "TCA9548APWR" # 8-channel I2C switch


module I2CClientExampleDriver:
    """
    Example driver for the I2C client/server example
    """

    # addressor with 3 address lines
    addressor = new Addressor3
    ic = new I2CClientExampleIC
    power = new ElectricPower

    i2c = new I2C

    # Setup addressor:
    # Link the addressor's logical address parameter to the I2C interface's address parameter.
    assert addressor.address is i2c.address 
    # Define the base address for the address calculation (can be 0 if no base offset).
    assert addressor.base is 16
    # Connect the addressor's output lines to the physical address pins of the IC.
    addressor.address_lines[0].line ~ ic.i2c_address_pin_1
    addressor.address_lines[1].line ~ ic.i2c_address_pin_2
    addressor.address_lines[2].line ~ ic.i2c_address_pin_3
    # Provide a reference (e.g., ground) for the addressor's logic lines.
    addressor.address_lines[0].reference ~ power
    
    # connect IC signals to the driver's interfaces (power and I2C)
    power.lv ~ ic.gnd
    power.hv ~ ic.vcc
    i2c.sda.line ~ ic.i2c_sda
    i2c.scl.line ~ ic.i2c_scl
    i2c.sda.reference ~ power
    i2c.scl.reference ~ power



module App:
    """
    Application to test the I2C client/server example
    """

    i2c_client = new I2CClientExampleDriver
    i2c_server = new I2CClientExampleDriver

    r1 = new Resistor
    r2 = new Resistor

    # Set the desired I2C address for the client.
    # The addressor will automatically determine the required logic levels
    # for the address pins (ic.i2c_address_pin_*) based on this constraint
    # and the base address (16). 18 = 16 (base) + 2 (offset).
    # Offset 2 (binary 010) means:
    # - address_lines[0] -> LOW
    # - address_lines[1] -> HIGH
    # - address_lines[2] -> LOW
    assert i2c_client.addressor.address is 18

    # Connect the client and server I2C buses together.
    i2c_server.i2c ~ i2c_client.i2c
    # Add required pull-up resistors for the I2C bus.
    i2c_client.i2c.sda.line ~ r1.unnamed[0]
    i2c_client.i2c.scl.line ~ r2.unnamed[0]

    r1.unnamed[1] ~ i2c_client.power.hv
    r2.unnamed[1] ~ i2c_client.power.hv

    assert r1.resistance within 9kohm to 11kohm
    assert r2.resistance within 9kohm to 11kohm
