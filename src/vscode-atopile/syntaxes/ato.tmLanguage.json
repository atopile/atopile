{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "atopile",
	"scopeName": "source.ato",
	"patterns": [
		{
			"name": "meta.pragma.ato",
			"match": "^\\s*(#pragma)\\s+([a-zA-Z_][a-zA-Z_0-9]*)(?:\\s*(\\()(.*?)(\\)))?",
			"captures": {
				"1": {
					"name": "keyword.control.directive.pragma.ato"
				},
				"2": {
					"name": "entity.name.function.pragma.ato"
				},
				"3": {
					"name": "punctuation.definition.arguments.begin.bracket.round.pragma.ato"
				},
				"4": {
					"patterns": [
						{
							"include": "#strings"
						},
						{
							"include": "#numbers"
						}
					]
				},
				"5": {
					"name": "punctuation.definition.arguments.end.bracket.round.pragma.ato"
				}
			}
		},
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#block_definitions"
		},
		{
			"include": "#instantiation"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#traits"
		},
		{
			"include": "#references"
		}
	],
	"repository": {
		"comments": {
			"name": "comment.line.number-sign.ato",
			"match": "#.*"
		},
		"strings": {
			"name": "string.quoted.double.ato",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ato",
					"match": "\\\\."
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.import.ato",
					"match": "\\b(import|from)\\b"
				},
				{
					"name": "keyword.control.flow.ato",
					"match": "\\b(for|in|pass)\\b"
				},
				{
					"name": "keyword.operator.word.ato",
					"match": "\\b(assert|within|is|to)\\b"
				},
				{
					"name": "storage.type.definition.ato",
					"match": "\\b(module|component|interface)\\b"
				},
				{
					"name": "storage.type.declaration.ato",
					"match": "\\b(pin|signal)\\b"
				},
				{
					"name": "keyword.operator.new.ato",
					"match": "\\b(new)\\b"
				},
				{
					"name": "keyword.other.trait.ato",
					"match": "\\b(trait)\\b"
				},
				{
					"name": "constant.language.boolean.ato",
					"match": "\\b(True|False)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.retype.ato",
					"match": "->"
				},
				{
					"name": "keyword.operator.connection.directed.ato",
					"match": "(~>|<~)"
				},
				{
					"name": "keyword.operator.cumulative.assignment.ato",
					"match": "(\\+=|-=)"
				},
				{
					"name": "keyword.operator.set.assignment.ato",
					"match": "(\\|=|&=)"
				},
				{
					"name": "keyword.operator.exponentiation.ato",
					"match": "\\*\\*"
				},
				{
					"name": "keyword.operator.comparison.ato",
					"match": "(<=|>=)"
				},
				{
					"name": "punctuation.separator.double-colon.ato",
					"match": "::"
				},
				{
					"name": "keyword.operator.assignment.ato",
					"match": "="
				},
				{
					"name": "keyword.operator.connection.undirected.ato",
					"match": "~"
				},
				{
					"name": "keyword.operator.comparison.ato",
					"match": "(<|<=|>|>=)"
				},
				{
					"name": "keyword.operator.arithmetic.ato",
					"match": "([\\+\\-\\*\\/])"
				},
				{
					"name": "keyword.operator.logical.ato",
					"match": "([\\|&])"
				},
				{
					"name": "punctuation.accessor.dot.ato",
					"match": "\\."
				},
				{
					"name": "punctuation.separator.colon.ato",
					"match": ":"
				},
				{
					"name": "punctuation.separator.comma.ato",
					"match": ","
				},
				{
					"name": "punctuation.separator.semicolon.ato",
					"match": ";"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.physical.bilateral.percentage.ato",
					"match": "\\b((?:[+-]?)\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*([a-zA-Z%Ωµμ\\u00B0]+)?\\s*(\\+/-)\\s*((?:[+-]?)\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*(%)",
					"captures": {
						"1": {
							"name": "constant.numeric.value.ato"
						},
						"2": {
							"name": "entity.name.tag.unit.ato"
						},
						"3": {
							"name": "keyword.operator.tolerance.ato"
						},
						"4": {
							"name": "constant.numeric.tolerance.ato"
						},
						"5": {
							"name": "entity.name.tag.unit.percentage.ato"
						}
					}
				},
				{
					"name": "constant.numeric.physical.bilateral.absolute.ato",
					"match": "\\b((?:[+-]?)\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*([a-zA-Z%Ωµμ\\u00B0]+)?\\s*(\\+/-)\\s*((?:[+-]?)\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*([a-zA-ZΩµμ\\u00B0]+)?\\b",
					"captures": {
						"1": {
							"name": "constant.numeric.value.ato"
						},
						"2": {
							"name": "entity.name.tag.unit.ato"
						},
						"3": {
							"name": "keyword.operator.tolerance.ato"
						},
						"4": {
							"name": "constant.numeric.tolerance.ato"
						},
						"5": {
							"name": "entity.name.tag.unit.tolerance.ato"
						}
					}
				},
				{
					"name": "constant.numeric.physical.range.ato",
					"match": "\\b((?:[+-]?)\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*([a-zA-Z%Ωµμ\\u00B0]+)?\\s+\\b(to)\\b\\s+((?:[+-]?)\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*([a-zA-Z%Ωµμ\\u00B0]+)?\\b",
					"captures": {
						"1": {
							"name": "constant.numeric.value.lower.ato"
						},
						"2": {
							"name": "entity.name.tag.unit.ato"
						},
						"3": {
							"name": "keyword.operator.range.ato"
						},
						"4": {
							"name": "constant.numeric.value.upper.ato"
						},
						"5": {
							"name": "entity.name.tag.unit.ato"
						}
					}
				},
				{
					"name": "constant.numeric.physical.simple.ato",
					"match": "\\b((?:[+-]?)\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*([a-zA-Z%Ωµμ\\u00B0]+)?\\b(?!\\s*(?:\\+/-|\\bto\\b))",
					"captures": {
						"1": {
							"name": "constant.numeric.value.ato"
						},
						"2": {
							"name": "entity.name.tag.unit.ato"
						}
					}
				}
			]
		},
		"template_parameters": {
			"patterns": [
				{
					"match": "([a-zA-Z_][a-zA-Z_0-9]*)\\s*(=)",
					"captures": {
						"1": {
							"name": "variable.parameter.template.ato"
						},
						"2": {
							"name": "keyword.operator.assignment.template.ato"
						}
					}
				},
				{
					"match": "<",
					"name": "punctuation.definition.template.begin.bracket.angle.ato"
				},
				{
					"match": ">",
					"name": "punctuation.definition.template.end.bracket.angle.ato"
				},
				{
					"match": ",",
					"name": "punctuation.separator.comma.template.ato"
				},
				{
					"match": "=\\s*(\"[^\"]*\")",
					"captures": {
						"1": {
							"name": "string.quoted.double.template.ato"
						}
					}
				},
				{
					"match": "=\\s*([+-]?\\d+(?:\\.\\d+)?)",
					"captures": {
						"1": {
							"name": "constant.numeric.template.ato"
						}
					}
				},
				{
					"match": "=\\s*(True|False)",
					"captures": {
						"1": {
							"name": "constant.language.boolean.template.ato"
						}
					}
				}
			]
		}
	},
	"block_definitions": {
		"patterns": [
			{
				"begin": "^\\s*(module|component|interface)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(<))?",
				"beginCaptures": {
					"1": {
						"name": "storage.type.definition.ato"
					},
					"2": {
						"name": "entity.name.type.class.ato"
					},
					"3": {
						"name": "punctuation.definition.template.begin.bracket.angle.ato"
					}
				},
				"end": "(?:(?<=>)\\s*)?(?=:)",
				"name": "meta.definition.block.header.ato",
				"patterns": [
					{
						"match": "\\s*(from)\\s+([a-zA-Z_][a-zA-Z_0-9]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)",
						"captures": {
							"1": {
								"name": "keyword.control.inheritance.ato"
							},
							"2": {
								"name": "entity.other.inherited-class.ato"
							}
						}
					},
					{
						"include": "#template_parameters"
					}
				]
			}
		]
	},
	"instantiation": {
		"patterns": [
			{
				"begin": "\\b(new)\\s+([a-zA-Z_][a-zA-Z_0-9]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)\\s*(?:(\\[)|(<))?",
				"beginCaptures": {
					"1": {
						"name": "keyword.operator.new.ato"
					},
					"2": {
						"name": "entity.name.type.instance.ato"
					},
					"3": {
						"name": "punctuation.definition.array.begin.bracket.square.ato"
					},
					"4": {
						"name": "punctuation.definition.template.begin.bracket.angle.ato"
					}
				},
				"end": "(?<=\\])|(?<=>)|(?=;)|(?=\\n)|($)",
				"name": "meta.instantiation.ato",
				"patterns": [
					{
						"include": "#strings"
					},
					{
						"include": "#numbers"
					},
					{
						"include": "#references"
					},
					{
						"include": "#operators"
					},
					{
						"include": "#template_parameters"
					}
				]
			}
		]
	},
	"declarations": {
		"patterns": [
			{
				"match": "\\b(pin)\\s+(?:([a-zA-Z_][a-zA-Z_0-9]*)|(\\d+)|(\"))",
				"captures": {
					"1": {
						"name": "storage.type.declaration.pin.ato"
					},
					"2": {
						"name": "entity.name.variable.pin.ato"
					},
					"3": {
						"name": "constant.numeric.integer.pin.ato"
					},
					"4": {
						"name": "punctuation.definition.string.begin.ato"
					}
				}
			},
			{
				"match": "\\b(signal)\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
				"captures": {
					"1": {
						"name": "storage.type.declaration.signal.ato"
					},
					"2": {
						"name": "entity.name.variable.signal.ato"
					}
				}
			},
			{
				"match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(:)\\s*([a-zA-Z_][a-zA-Z_0-9]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)",
				"captures": {
					"1": {
						"name": "variable.other.declaration.annotated.ato"
					},
					"2": {
						"name": "punctuation.separator.colon.ato"
					},
					"3": {
						"name": "storage.type.annotation.ato"
					}
				}
			}
		]
	},
	"traits": {
		"patterns": [
			{
				"begin": "\\b(trait)\\s+([a-zA-Z_][a-zA-Z_0-9]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)\\s*(?:(::)\\s*([a-zA-Z_][a-zA-Z_0-9]*))?\\s*(<)?",
				"beginCaptures": {
					"1": {
						"name": "keyword.other.trait.ato"
					},
					"2": {
						"name": "entity.name.trait.ato"
					},
					"3": {
						"name": "punctuation.separator.double-colon.ato"
					},
					"4": {
						"name": "entity.name.function.constructor.trait.ato"
					},
					"5": {
						"name": "punctuation.definition.template.begin.bracket.angle.ato"
					}
				},
				"end": "(?<=\\>)|(?=;)|(?=\\n)|($)",
				"name": "meta.trait.definition.ato",
				"patterns": [
					{
						"include": "#strings"
					},
					{
						"include": "#numbers"
					},
					{
						"include": "#references"
					},
					{
						"include": "#operators"
					},
					{
						"include": "#template_parameters"
					}
				]
			}
		]
	},
	"references": {
		"patterns": [
			{
				"match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(\\()",
				"captures": {
					"1": {
						"name": "entity.name.function.call.ato"
					},
					"2": {
						"name": "punctuation.definition.arguments.begin.bracket.round.ato"
					}
				}
			},
			{
				"begin": "([a-zA-Z_][a-zA-Z_0-9]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)\\s*(\\[)",
				"beginCaptures": {
					"1": {
						"name": "variable.other.indexed.ato"
					},
					"2": {
						"name": "punctuation.definition.array.begin.bracket.square.ato"
					}
				},
				"end": "(\\])",
				"endCaptures": {
					"1": {
						"name": "punctuation.definition.array.end.bracket.square.ato"
					}
				},
				"name": "meta.array.access.ato",
				"patterns": [
					{
						"include": "#strings"
					},
					{
						"include": "#numbers"
					},
					{
						"include": "#references"
					},
					{
						"include": "#operators"
					}
				]
			},
			{
				"match": "\\b([a-zA-Z_][a-zA-Z_0-9]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)\\b",
				"name": "variable.other.ato"
			}
		]
	}
}