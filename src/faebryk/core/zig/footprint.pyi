# This file is part of the faebryk project
# SPDX-License-Identifier: MIT

# This file is auto-generated by zig.
# Do not edit this file directly; edit the corresponding
# Zig file instead.

from enum import Enum  # noqa: F401
from typing import Any  # noqa: F401

from faebryk.core.zig.pcb import (
    Arc,
    Circle,
    FpText,
    Line,
    Model,
    Pad,
    Polygon,
    Property,
    Rect,
)

# Dirty hack to not error in ruff check
type Allocator = Any

class Footprint:
    name: str
    layer: str
    uuid: str | None
    path: str | None
    propertys: list[Property]
    fp_texts: list[FpText]
    attr: list[str]
    fp_lines: list[Line]
    fp_arcs: list[Arc]
    fp_circles: list[Circle]
    fp_rects: list[Rect]
    fp_poly: list[Polygon]
    pads: list[Pad]
    models: list[Model]
    description: str | None
    tags: list[str]
    version: int
    generator: str
    generator_version: str
    tedit: str | None

    def __init__(
        self,
        name: str,
        layer: str,
        uuid: str | None,
        path: str | None,
        propertys: list[Property],
        fp_texts: list[FpText],
        attr: list[str],
        fp_lines: list[Line],
        fp_arcs: list[Arc],
        fp_circles: list[Circle],
        fp_rects: list[Rect],
        fp_poly: list[Polygon],
        pads: list[Pad],
        models: list[Model],
        description: str | None,
        tags: list[str],
        version: int,
        generator: str,
        generator_version: str,
        tedit: str | None,
    ) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def __field_names__(self) -> list[str]: ...

class FootprintFile:
    footprint: Footprint

    def __init__(self, footprint: Footprint) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def __field_names__(self) -> list[str]: ...
    def free(self, arg_0: Allocator) -> None: ...

# Module-level functions
def loads(data: str) -> FootprintFile: ...
def dumps(obj: FootprintFile) -> str: ...
