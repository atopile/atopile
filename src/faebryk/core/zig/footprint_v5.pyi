# This file is part of the faebryk project
# SPDX-License-Identifier: MIT

# This file is auto-generated by zig.
# Do not edit this file directly; edit the corresponding
# Zig file instead.

from enum import Enum  # noqa: F401
from typing import Any  # noqa: F401

from faebryk.core.zig.pcb import FpText, ModelXyz, Pad, Polygon, Property, Xy

# Dirty hack to not error in ruff check
type Allocator = Any

class Line:
    start: Xy
    end: Xy
    layer: str
    width: float

    def __init__(self, *, start: Xy, end: Xy, layer: str, width: float) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def __field_names__() -> list[str]: ...

class Circle:
    center: Xy
    end: Xy
    width: float
    fill: str
    layer: str

    def __init__(
        self, *, center: Xy, end: Xy, width: float, fill: str, layer: str
    ) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def __field_names__() -> list[str]: ...

class Arc:
    start: Xy
    end: Xy
    width: float
    layer: str
    angle: float

    def __init__(
        self, *, start: Xy, end: Xy, width: float, layer: str, angle: float
    ) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def __field_names__() -> list[str]: ...

class Rect:
    start: Xy
    end: Xy
    width: float
    fill: str
    layer: str

    def __init__(
        self, *, start: Xy, end: Xy, width: float, fill: str, layer: str
    ) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def __field_names__() -> list[str]: ...

class Model:
    path: str
    scale: ModelXyz
    rotate: ModelXyz
    offset: ModelXyz | None
    at: ModelXyz | None

    def __init__(
        self,
        *,
        path: str,
        scale: ModelXyz,
        rotate: ModelXyz,
        offset: ModelXyz | None,
        at: ModelXyz | None,
    ) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def __field_names__() -> list[str]: ...

class Footprint:
    name: str
    layer: str
    uuid: str | None
    path: str | None
    propertys: list[Property]
    fp_texts: list[FpText]
    attr: list[str]
    fp_lines: list[Line]
    fp_arcs: list[Arc]
    fp_circles: list[Circle]
    fp_rects: list[Rect]
    fp_poly: list[Polygon]
    pads: list[Pad]
    model: Model | None
    description: str | None
    tags: list[str]
    tedit: str | None

    def __init__(
        self,
        *,
        name: str,
        layer: str,
        uuid: str | None,
        path: str | None,
        propertys: list[Property],
        fp_texts: list[FpText],
        attr: list[str],
        fp_lines: list[Line],
        fp_arcs: list[Arc],
        fp_circles: list[Circle],
        fp_rects: list[Rect],
        fp_poly: list[Polygon],
        pads: list[Pad],
        model: Model | None,
        description: str | None,
        tags: list[str],
        tedit: str | None,
    ) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def __field_names__() -> list[str]: ...

class FootprintFile:
    footprint: Footprint

    def __init__(self, *, footprint: Footprint) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def __field_names__() -> list[str]: ...
    def free(self, arg_0: Allocator) -> None: ...

# Module-level functions
def loads(data: str) -> FootprintFile: ...
def dumps(obj: FootprintFile) -> str: ...
