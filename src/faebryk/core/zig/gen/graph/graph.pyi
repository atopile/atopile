# This file is part of the faebryk project
# SPDX-License-Identifier: MIT

# This file is auto-generated by zig.
# Do not edit this file directly; edit the corresponding
# Zig file instead.

from typing import Callable

Literal = int | float | str | bool

class Node:
    __init__: None
    @staticmethod
    def create(**attrs: Literal) -> Node: ...
    def get_attr(self, key: str) -> Literal | None: ...
    def is_same(self, other: Node) -> bool: ...

class Edge:
    __init__: None
    Type = int

    @staticmethod
    def create(
        source: Node,
        target: Node,
        edge_type: Type,
        directional: bool | None = None,
        name: str | None = None,
        **attrs: Literal,
    ) -> Edge: ...
    @property
    def source(self) -> Node: ...
    @property
    def target(self) -> Node: ...
    @property
    def edge_type(self) -> Type: ...
    @property
    def directional(self) -> bool | None: ...
    @property
    def name(self) -> str | None: ...
    def get_attr(self, key: str) -> Literal | None: ...
    def is_same(self, other: Edge) -> bool: ...

class BoundNode:
    __init__: None
    @property
    def node(self) -> Node: ...
    @property
    def g(self) -> GraphView: ...
    def visit_edges_of_type[T](
        self,
        *,
        edge_type: Edge.Type,
        T: type,
        ctx: T,
        f: Callable[[T, BoundEdge], None],
    ) -> None: ...

class BoundEdge:
    __init__: None
    @property
    def edge(self) -> Edge: ...
    @property
    def g(self) -> GraphView: ...

class GraphView:
    __init__: None
    def insert_node(self, node: Node) -> BoundNode: ...
    def insert_edge(self, edge: Edge) -> BoundEdge: ...
    def bind(self, node: Node) -> BoundNode: ...
    @staticmethod
    def create() -> GraphView: ...
