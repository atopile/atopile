# This file is part of the faebryk project
# SPDX-License-Identifier: MIT

# This file is auto-generated by zig.
# Do not edit this file directly; edit the corresponding
# Zig file instead.

from typing import Any  # noqa: F401

from faebryk.core.zig.pcb import Effects, Xy, Xyr

# Dirty hack to not error in ruff check
type Allocator = Any

class Pts:
    xys: list[Xy]

    def __init__(self, xys: list[Xy]) -> None: ...
    def __repr__(self) -> str: ...

class Fill:
    type: Any

    def __init__(self, type: Any) -> None: ...
    def __repr__(self) -> str: ...

class Stroke:
    width: float
    type: Any
    color: Color

    def __init__(self, width: float, type: Any, color: Color) -> None: ...
    def __repr__(self) -> str: ...

class Circle:
    center: Xy
    end: Xy
    stroke: Stroke
    fill: Fill

    def __init__(self, center: Xy, end: Xy, stroke: Stroke, fill: Fill) -> None: ...
    def __repr__(self) -> str: ...

class Arc:
    start: Xy
    mid: Xy
    end: Xy
    stroke: Stroke
    fill: Fill

    def __init__(
        self, start: Xy, mid: Xy, end: Xy, stroke: Stroke, fill: Fill
    ) -> None: ...
    def __repr__(self) -> str: ...

class Rect:
    start: Xy
    end: Xy
    stroke: Stroke
    fill: Fill

    def __init__(self, start: Xy, end: Xy, stroke: Stroke, fill: Fill) -> None: ...
    def __repr__(self) -> str: ...

class Polyline:
    stroke: Stroke
    fill: Fill
    pts: Pts

    def __init__(self, stroke: Stroke, fill: Fill, pts: Pts) -> None: ...
    def __repr__(self) -> str: ...

class Property:
    name: str
    value: str
    id: int | None
    at: Xyr | None
    effects: Effects | None

    def __init__(
        self,
        name: str,
        value: str,
        id: int | None,
        at: Xyr | None,
        effects: Effects | None,
    ) -> None: ...
    def __repr__(self) -> str: ...

class PinNames:
    offset: float

    def __init__(self, offset: float) -> None: ...
    def __repr__(self) -> str: ...

class PinName:
    name: str
    effects: Effects

    def __init__(self, name: str, effects: Effects) -> None: ...
    def __repr__(self) -> str: ...

class PinNumber:
    number: str
    effects: Effects

    def __init__(self, number: str, effects: Effects) -> None: ...
    def __repr__(self) -> str: ...

class SymbolPin:
    at: Xyr
    length: float
    type: Any
    style: Any
    name: PinName
    number: PinNumber

    def __init__(
        self,
        at: Xyr,
        length: float,
        type: Any,
        style: Any,
        name: PinName,
        number: PinNumber,
    ) -> None: ...
    def __repr__(self) -> str: ...

class SymbolUnit:
    name: str
    polylines: list[Polyline]
    circles: list[Circle]
    rectangles: list[Rect]
    arcs: list[Arc]
    pins: list[SymbolPin]

    def __init__(
        self,
        name: str,
        polylines: list[Polyline],
        circles: list[Circle],
        rectangles: list[Rect],
        arcs: list[Arc],
        pins: list[SymbolPin],
    ) -> None: ...
    def __repr__(self) -> str: ...

class Power:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...

class Symbol:
    name: str
    power: Power | None
    propertys: list[Property]
    pin_numbers: Any | None
    pin_names: PinNames | None
    in_bom: bool | None
    on_board: bool | None
    symbols: list[SymbolUnit]
    convert: int | None

    def __init__(
        self,
        name: str,
        power: Power | None,
        propertys: list[Property],
        pin_numbers: Any | None,
        pin_names: PinNames | None,
        in_bom: bool | None,
        on_board: bool | None,
        symbols: list[SymbolUnit],
        convert: int | None,
    ) -> None: ...
    def __repr__(self) -> str: ...

class InstancePin:
    name: str
    uuid: str

    def __init__(self, name: str, uuid: str) -> None: ...
    def __repr__(self) -> str: ...

class SymbolInstance:
    lib_id: str
    at: Xyr
    unit: int
    in_bom: bool
    on_board: bool
    uuid: str
    fields_autoplaced: bool
    propertys: list[Property]
    pins: list[InstancePin]
    convert: int | None

    def __init__(
        self,
        lib_id: str,
        at: Xyr,
        unit: int,
        in_bom: bool,
        on_board: bool,
        uuid: str,
        fields_autoplaced: bool,
        propertys: list[Property],
        pins: list[InstancePin],
        convert: int | None,
    ) -> None: ...
    def __repr__(self) -> str: ...

class Junction:
    at: Xy
    diameter: float
    color: Color
    uuid: str

    def __init__(self, at: Xy, diameter: float, color: Color, uuid: str) -> None: ...
    def __repr__(self) -> str: ...

class Wire:
    pts: Pts
    stroke: Stroke
    uuid: str

    def __init__(self, pts: Pts, stroke: Stroke, uuid: str) -> None: ...
    def __repr__(self) -> str: ...

class Text:
    text: str
    at: Xyr
    effects: Effects
    uuid: str

    def __init__(self, text: str, at: Xyr, effects: Effects, uuid: str) -> None: ...
    def __repr__(self) -> str: ...

class SheetPin:
    name: str
    type: Any
    at: Xyr
    effects: Effects
    uuid: str

    def __init__(
        self, name: str, type: Any, at: Xyr, effects: Effects, uuid: str
    ) -> None: ...
    def __repr__(self) -> str: ...

class Sheet:
    at: Xy
    size: Xy
    stroke: Stroke
    fill: Fill
    uuid: str
    fields_autoplaced: bool
    propertys: list[Property]
    pins: list[SheetPin]

    def __init__(
        self,
        at: Xy,
        size: Xy,
        stroke: Stroke,
        fill: Fill,
        uuid: str,
        fields_autoplaced: bool,
        propertys: list[Property],
        pins: list[SheetPin],
    ) -> None: ...
    def __repr__(self) -> str: ...

class GlobalLabel:
    text: str
    shape: Any
    at: Xyr
    effects: Effects
    uuid: str
    fields_autoplaced: bool
    propertys: list[Property]

    def __init__(
        self,
        text: str,
        shape: Any,
        at: Xyr,
        effects: Effects,
        uuid: str,
        fields_autoplaced: bool,
        propertys: list[Property],
    ) -> None: ...
    def __repr__(self) -> str: ...

class Label:
    text: str
    at: Xyr
    effects: Effects
    uuid: str

    def __init__(self, text: str, at: Xyr, effects: Effects, uuid: str) -> None: ...
    def __repr__(self) -> str: ...

class Bus:
    pts: Pts
    stroke: Stroke
    uuid: str

    def __init__(self, pts: Pts, stroke: Stroke, uuid: str) -> None: ...
    def __repr__(self) -> str: ...

class BusEntry:
    at: Xy
    size: Xy
    stroke: Stroke
    uuid: str

    def __init__(self, at: Xy, size: Xy, stroke: Stroke, uuid: str) -> None: ...
    def __repr__(self) -> str: ...

class TitleBlock:
    title: str | None
    date: str | None
    rev: str | None
    company: str | None

    def __init__(
        self, title: str | None, date: str | None, rev: str | None, company: str | None
    ) -> None: ...
    def __repr__(self) -> str: ...

class LibSymbols:
    symbols: list[Symbol]

    def __init__(self, symbols: list[Symbol]) -> None: ...
    def __repr__(self) -> str: ...

class Color:
    r: int
    g: int
    b: int
    a: int

    def __init__(self, r: int, g: int, b: int, a: int) -> None: ...
    def __repr__(self) -> str: ...

class KicadSch:
    version: int
    generator: str
    paper: str
    uuid: str
    lib_symbols: LibSymbols
    title_block: TitleBlock
    junctions: list[Junction]
    wires: list[Wire]
    texts: list[Text]
    symbols: list[SymbolInstance]
    sheets: list[Sheet]
    global_labels: list[GlobalLabel]
    no_connects: list[Xy]
    buss: list[Bus]
    labels: list[Label]
    bus_entrys: list[BusEntry]

    def __init__(
        self,
        version: int,
        generator: str,
        paper: str,
        uuid: str,
        lib_symbols: LibSymbols,
        title_block: TitleBlock,
        junctions: list[Junction],
        wires: list[Wire],
        texts: list[Text],
        symbols: list[SymbolInstance],
        sheets: list[Sheet],
        global_labels: list[GlobalLabel],
        no_connects: list[Xy],
        buss: list[Bus],
        labels: list[Label],
        bus_entrys: list[BusEntry],
    ) -> None: ...
    def __repr__(self) -> str: ...

class SchematicFile:
    kicad_sch: KicadSch

    def __init__(self, kicad_sch: KicadSch) -> None: ...
    def __repr__(self) -> str: ...
    def free(self, arg_0: Allocator) -> None: ...

# Module-level functions
def loads(data: str) -> SchematicFile: ...
def dumps(obj: SchematicFile) -> str: ...
