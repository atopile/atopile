import importlib.util
import logging
import sys
from pathlib import Path

from faebryk.libs.util import (
    ConfigFlagString,
    debug_perf,
    get_python_lib,
    global_lock,
    is_editable_install,
    run_live,
)

logger = logging.getLogger(__name__)

_thisfile = Path(__file__)
_thisdir = _thisfile.parent
_build_dir = _thisdir / "zig-out" / "lib"

RELEASEMODE = ConfigFlagString("ZIG_RELEASEMODE", default="Debug")


@debug_perf
def compile_zig():
    from faebryk.libs.header import formatted_file_contents, get_header

    zig_cmd = [sys.executable, "-m", "ziglang"]
    python_lib = get_python_lib()

    # Use zig build system with Python configuration
    cmd = [
        *zig_cmd,
        "build",
        "python-ext",
        f"-Doptimize={RELEASEMODE.value}",
        f"-Dpython-include={python_lib.include_path}",
        f"-Dpython-lib={python_lib.name}",
        *([f"-Dpython-lib-dir={python_lib.dir_path}"] if python_lib.dir_path else []),
    ]

    logger.info(f"Building with command: {' '.join(cmd)}")
    with global_lock(_build_dir / "lock", timeout_s=60):
        run_live(cmd, cwd=Path(__file__).parent)

    # Process all generated pyi files
    for pyi_source in _build_dir.glob("*.pyi"):
        # Copy to source directory with proper formatting
        pyi_out = _thisdir / pyi_source.name
        pyi_out.write_text(
            formatted_file_contents(
                get_header()
                + "\n"
                + "# This file is auto-generated by zig.\n"
                + "# Do not edit this file directly; edit the corresponding\n"
                + "# Zig file instead.\n\n"
                + pyi_source.read_text(encoding="utf-8"),
                is_pyi=True,
            ),
            encoding="utf-8",
        )
        run_live(
            [sys.executable, "-m", "ruff", "check", "--fix", pyi_out],
            stdout=logger.debug,
            stderr=logger.error,
        )


def load():
    # Insert at beginning to override any installed version
    spec = importlib.util.spec_from_file_location("pyzig", _build_dir / "pyzig.so")
    assert spec and spec.loader

    # Import from the local build directory, not from installed package
    pyzig = importlib.util.module_from_spec(spec)
    sys.modules["pyzig_local"] = pyzig  # Use different name to avoid conflicts
    spec.loader.exec_module(pyzig)

    # Import all symbols from the local build
    for name in dir(pyzig):
        if not name.startswith("_"):
            globals()[name] = getattr(pyzig, name)


# Fallback to editable build-on-import
if is_editable_install():
    compile_zig()
    load()
else:
    from pyzig import *  # type: ignore # noqa: E402, F403,F401
