import logging
import sys
from pathlib import Path

from faebryk.libs.util import FileChangedWatcher, debug_perf, global_lock, run_live

logger = logging.getLogger(__name__)

_thisfile = Path(__file__)
_thisdir = _thisfile.parent
_build_dir = _thisdir / "zig-out" / "lib"
_pyi_source = _build_dir / "pyzig.pyi"
_ext_name = "pyzig.pyd" if sys.platform.startswith("win") else "pyzig.so"


@debug_perf
def compile_zig():
    # Get Python include directory
    import sysconfig

    from faebryk.libs.header import formatted_file_contents, get_header

    python_include = sysconfig.get_paths()["include"]
    # On Windows, the import lib is named e.g. python313 and may live under libs/
    if sys.platform.startswith("win"):
        python_lib = f"python{sys.version_info.major}{sys.version_info.minor}"
        purelib = Path(sysconfig.get_paths()["data"])  # base of the runtime
        lib_dir = purelib / "libs"
        lib_dir_opt = [f"-Dpython-lib-dir={lib_dir}"] if lib_dir.exists() else []
    else:
        python_lib = f"python{sys.version_info.major}.{sys.version_info.minor}"
        lib_dir_opt = []

    zig_cmd = [sys.executable, "-m", "ziglang"]

    # Use zig build system with Python configuration
    cmd = [
        *zig_cmd,
        "build",
        "python-ext",
        "-Doptimize=ReleaseFast",
        f"-Dpython-include={python_include}",
        f"-Dpython-lib={python_lib}",
        *lib_dir_opt,
    ]

    pyi_watcher = FileChangedWatcher(_pyi_source, FileChangedWatcher.CheckMethod.HASH)

    logger.info(f"Building with command: {' '.join(cmd)}")
    with global_lock(_build_dir / "lock", timeout_s=60):
        run_live(cmd, cwd=Path(__file__).parent)

    if not (_build_dir / _ext_name).exists():
        raise RuntimeError("Failed to build Zig extension")

    # move autogenerated type stub file to source directory
    if pyi_watcher.has_changed():
        pyi_out = _thisfile.with_suffix(".pyi")
        pyi_out.write_text(
            formatted_file_contents(
                get_header()
                + "\n"
                + "# This file is auto-generated by zig.\n"
                + "# Do not edit this file directly; edit the corresponding\n"
                + "# Zig file instead.\n"
                # + "from typing import overload\n"
                + _pyi_source.read_text(encoding="utf-8"),
                is_pyi=True,
            ),
            encoding="utf-8",
        )
        run_live(
            [sys.executable, "-m", "ruff", "check", "--fix", pyi_out],
            stdout=logger.debug,
            stderr=logger.error,
        )


def load():
    sys.path.append(str(_build_dir))


compile_zig()
load()

from pyzig import *  # type: ignore # noqa: E402, F403
