[build-system]
# using scikit-build-core>0.9.3 disables editable mode
requires = ["hatchling", "scikit-build-core==0.9.2", "nanobind~=2.2.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "faebryk"
dynamic = ["version"]
authors = [{ name = "Ioannis Papamanoglou", email = "ioannis@atopile.io" }]
description = "Open-source software-defined EDA"
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.12,<3.13"
dependencies = [
    "networkx==3.3",
    "numpy>=1.24.3,<3.0.0",
    "scipy>=1.11.1,<=1.14.0",
    "matplotlib~=3.7.1",
    "sexpdata==1.0.2",
    "black~=24.4.2",
    "typing-extensions~=4.6.3",
    "easyeda2kicad~=0.8.0",
    "shapely~=2.0.1",
    "freetype-py~=2.4.0",
    "kicadcliwrapper~=1.0.0",
    "dataclasses-json~=0.6.7",
    "patool~=2.3.0",
    "requests~=2.32.3",
    "tortoise-orm~=0.21.3",
    "rich~=13.7.1",
    "typer>=0.12,<0.13",
    "isort~=5.6.4",
    "ruff>=0.6.4,<0.7.0",
    "pint~=0.24.3",
    "deprecated~=1.2.14",
    "more-itertools~=10.4.0",
    "psutil~=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=2.20,<4.0",
    "pytest>=7.1.3,<9.0.0",
    "viztracer~=0.16.3",
    "pyinstrument~=4.7.1",
    "gprof2dot~=2024.6.6",
    "pytest-xdist~=3.6.1",
    "dash~=2.18.1",
    "dash_cytoscape~=1.0.2",
    "nanobind~=2.2.0",
]
test = ["pytest>=7.1.3,<9.0.0", "pytest-xdist~=3.6.1", "nanobind~=2.2.0"]


[project.scripts]
faebryk = "faebryk.tools.main:__main__"

[project.urls]
"Homepage" = "https://github.com/atopile/faebryk"
"Bug Tracker" = "https://github.com/atopile/faebryk/issues"

[tool.hatch]

[tool.hatch.env]
#requires = ["hatch-pip-compile"]


[tool.hatch.envs.default]
#type = "pip-compile"
#pip-compile-resolver = "uv"
#pip-compile-installer = "uv"
#lock-filename = "locks/hatch.lock"
#pip-compile-verbose = true
#dependencies = ["faebryk[dev]"]

[tool.hatch.envs.test]
dependencies = ["faebryk[test]"]


[tool.hatch.build.targets.wheel]
packages = ["src/faebryk"]

[tool.hatch.build.targets.wheel.hooks.scikit-build]
experimental = true
cmake.source-dir = "src/faebryk/core/cpp"


[tool.pytest]
[tool.pytest.ini_options]
# loadscope to run tests for each file in same worker
addopts = ["--import-mode=importlib", "--numprocesses=auto", "--dist=loadscope"]
filterwarnings = ["ignore:.*:DeprecationWarning"]
testpaths = ["test"]

[tool.ruff]
line-length = 88         # Same as Black.
target-version = "py312"

[tool.ruff.format]
exclude = ["_F.py"]

[tool.ruff.lint]
# Enable recommended set of rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I001", # isort
    #"B",    # flake8-bugbear
    #"C4",   # flake8-comprehensions
    #"PL",   # Pylint
    #"RUF",  # Ruff-specific rules
    #"UP",   # pyupgrade
    #"N",    # pep8-naming
    #"SIM",  # flake8-simplify
    #"TCH",  # flake8-type-checking
    #"ARG",  # flake8-unused-arguments
    #"PTH",  # flake8-use-pathlib
]
ignore = [
    # Line too long
    #"E501",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "N",   # pep8-naming
    "Q",   # flake8-quotes
    "S",   # flake8-bandit
    "T",   # flake8-print
    "W",   # pycodestyle warnings
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "BLE", # flake8-blind-except
    "COM", # flake8-commas
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "FBT", # flake8-boolean-trap
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "NPY", # NumPy-specific rules
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "YTT", # flake8-2020
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# SKiDL imported files are ignored because they use different linting rules to us
"src/faebryk/exporters/schematic/kicad/skidl/*" = ["ALL"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.hatch.version]
source = "vcs"
